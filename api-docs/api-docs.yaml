openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/users/{id}:
    get:
      tags:
      - users-rest-controller
      summary: Get a user by its id
      operationId: getUsersById
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: Found the User
          content:
            application/json: {}
    put:
      tags:
      - users-rest-controller
      summary: Modify a user
      operationId: replaceUser
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
        required: true
      responses:
        "404":
          description: User not found
          content: {}
        "201":
          description: Successful user modification
          content:
            application/json: {}
    delete:
      tags:
      - users-rest-controller
      summary: Delete a user
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: Successful user delete
          content:
            application/json: {}
  /api/products/{id}:
    get:
      tags:
      - products-rest-controller
      summary: Get a products by its id
      operationId: getProduct
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Product not found
          content: {}
        "200":
          description: Found the Product
          content:
            application/json: {}
    put:
      tags:
      - products-rest-controller
      summary: Modify a Product
      operationId: replaceProduct
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product_ProductDetails'
        required: true
      responses:
        "404":
          description: Product not found
          content: {}
        "201":
          description: Successful Product modification
          content:
            application/json: {}
    delete:
      tags:
      - products-rest-controller
      summary: Create a Product
      operationId: deleteProduct
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Product not found
          content: {}
        "201":
          description: Successful Product creation
          content:
            application/json: {}
  /api/bookmarks/{id}:
    get:
      tags:
      - bookmarks-rest-controller
      summary: Get a Bookmark by id
      operationId: getbookmark
      parameters:
      - name: id
        in: path
        description: id of bookmark to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Bookmark not found
          content: {}
        "200":
          description: Found the Bookmark
          content:
            application/json: {}
    put:
      tags:
      - bookmarks-rest-controller
      summary: Modify a Bookmark
      operationId: replacebookmark
      parameters:
      - name: id
        in: path
        description: id of bookmark to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListProducts_Basic'
        required: true
      responses:
        "404":
          description: Bookmark not found
          content: {}
        "201":
          description: Successful Bookmark modification
          content:
            application/json: {}
    delete:
      tags:
      - bookmarks-rest-controller
      summary: Delete a Bookmark
      operationId: deletebookmark
      parameters:
      - name: id
        in: path
        description: id of bookmark to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Bookmark not found
          content: {}
        "200":
          description: Successful Bookmark delete
          content:
            application/json: {}
  /api/users/{id}/imageThemeProfile:
    get:
      tags:
      - users-rest-controller
      summary: Get a profile theme image user by id
      operationId: getImageThemeProfile
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: Image not found
        "200":
          description: Found the Image Profile Theme
          content:
            application/json: {}
    post:
      tags:
      - users-rest-controller
      summary: create a profile image theme user by id
      operationId: uploadImageThemeProfile
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: user theme page picture
                  format: binary
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: Image not found
        "201":
          description: Create the ImageProfile Theme
          content:
            application/json: {}
  /api/users/{id}/imageProfile:
    get:
      tags:
      - users-rest-controller
      summary: Get a profile image user by id
      operationId: getImageProfile
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "204":
          description: Image not found
        "200":
          description: Found the Image Profile
          content:
            application/json: {}
    post:
      tags:
      - users-rest-controller
      summary: create a profile image user by id
      operationId: uploadImageProfile
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: user profile picture
                  format: binary
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Create the ImageProfile
          content:
            application/json: {}
        "204":
          description: Image not found
  /api/users/:
    get:
      tags:
      - users-rest-controller
      summary: Get a all users
      operationId: getAllUsers
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found the Users
          content:
            application/json: {}
    post:
      tags:
      - users-rest-controller
      summary: Create a user
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users_Detailed'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Successful user creation
          content:
            application/json: {}
  /api/relations/:
    get:
      tags:
      - relations-rest-controller
      summary: Get a all relations users
      operationId: getRelations
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found the Users relations
          content:
            application/json: {}
    post:
      tags:
      - relations-rest-controller
      summary: Create relation
      operationId: registerRelation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersRelations'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Successful relation creation
          content:
            application/json: {}
  /api/products/{id}/image2:
    get:
      tags:
      - products-rest-controller
      summary: Get a Image 2 Product by its id
      operationId: getImage2
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Product not found
          content: {}
        "200":
          description: Found the Image Product
          content:
            application/json: {}
        "204":
          description: Image not found
    post:
      tags:
      - products-rest-controller
      summary: Create a Image 2 Product by its id
      operationId: uploadImage2
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: Image 2 Product
                  format: binary
      responses:
        "404":
          description: Product not found
          content: {}
        "204":
          description: Image not found
        "201":
          description: Create the Image Product
          content:
            application/json: {}
  /api/products/{id}/image1:
    get:
      tags:
      - products-rest-controller
      summary: Get a Image 1 Product by its id
      operationId: getImage1
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Product not found
          content: {}
        "200":
          description: Found the Image Product
          content:
            application/json: {}
        "204":
          description: Image not found
    post:
      tags:
      - products-rest-controller
      summary: Create a Image 1 Product by its id
      operationId: uploadImage1
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: Image 1 Product
                  format: binary
      responses:
        "404":
          description: Product not found
          content: {}
        "204":
          description: Image not found
        "201":
          description: Create the Image Product
          content:
            application/json: {}
  /api/products/{id}/image0:
    get:
      tags:
      - products-rest-controller
      summary: Get a Image 0 Product by its id
      operationId: getImage0
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Product not found
          content: {}
        "200":
          description: Found the Image Product
          content:
            application/json: {}
        "204":
          description: Image not found
    post:
      tags:
      - products-rest-controller
      summary: Create a Image 0 Product by its id
      operationId: uploadImage0
      parameters:
      - name: id
        in: path
        description: id of Product to be searched
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                image:
                  type: string
                  description: Image 0 Product
                  format: binary
      responses:
        "404":
          description: Product not found
          content: {}
        "204":
          description: Image not found
        "201":
          description: Create the Image Product
          content:
            application/json: {}
  /api/products/:
    get:
      tags:
      - products-rest-controller
      summary: Get a all Products
      operationId: getAllProducts_1
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found the Products
          content:
            application/json: {}
    post:
      tags:
      - products-rest-controller
      summary: Create a Products
      operationId: registerProduct
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product_ProductDetails'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Successful Products creation
          content:
            application/json: {}
  /api/bookmarks/:
    get:
      tags:
      - bookmarks-rest-controller
      summary: Get a all Bookmarks
      operationId: getAllbookmarks
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found the Bookmarks
          content:
            application/json: {}
    post:
      tags:
      - bookmarks-rest-controller
      summary: Create Bookmark
      operationId: registerbookmark
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListProducts_Basic'
        required: true
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "201":
          description: Successful Bookmark creation
          content:
            application/json: {}
  /api/users/{id}/products:
    get:
      tags:
      - users-rest-controller
      summary: get all Products by user
      operationId: getAllProducts
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        description: page
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: found all products by user id
          content:
            application/json: {}
  /api/users/{id}/posts:
    get:
      tags:
      - users-rest-controller
      summary: get all posts by user
      operationId: getAllPost
      parameters:
      - name: id
        in: path
        description: id of user to be searched
        required: true
        schema:
          type: integer
          format: int32
      - name: page
        in: query
        description: page
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: found all posts by user id
          content:
            application/json: {}
  /api/users/customers:
    get:
      tags:
      - users-rest-controller
      summary: Get a all users type customers
      operationId: getUsers
      parameters:
      - name: page
        in: query
        description: page
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found the Users type customers
          content:
            application/json: {}
  /api/users/companies:
    get:
      tags:
      - users-rest-controller
      summary: Get a all users type companies
      operationId: getCompanies
      parameters:
      - name: page
        in: query
        description: page
        required: false
        schema:
          type: string
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found the Users type companies
          content:
            application/json: {}
  /api/relations/{id}:
    get:
      tags:
      - relations-rest-controller
      summary: Get a relations by id
      operationId: getRelationsId
      parameters:
      - name: id
        in: path
        description: id of relation to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Relation not found
          content: {}
        "200":
          description: Found the Relations
          content:
            application/json: {}
    delete:
      tags:
      - relations-rest-controller
      summary: Delete a relation
      operationId: deleteRelation
      parameters:
      - name: id
        in: path
        description: id of relation to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Relation not found
          content: {}
        "200":
          description: Successful relation delete
          content:
            application/json: {}
  /api/relations/users/{id}/following:
    get:
      tags:
      - relations-rest-controller
      summary: Get a followings by id users
      operationId: getUserRelations
      parameters:
      - name: id
        in: path
        description: id of relation to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Found the followings
          content:
            application/json: {}
  /api/relations/users/{id}/followers:
    get:
      tags:
      - relations-rest-controller
      summary: Get a followers by id users
      operationId: getRelationsUser
      parameters:
      - name: id
        in: path
        description: id of relation to be searched
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: User not found
          content: {}
        "200":
          description: Found the followers
          content:
            application/json: {}
components:
  schemas:
    Users:
      type: object
      properties:
        idusers:
          type: integer
          format: int32
        email:
          type: string
        username:
          type: string
        pass:
          type: string
        name:
          type: string
        companyprofile:
          type: boolean
        userprofile:
          type: boolean
        city:
          type: string
        userportimg:
          type: string
        userinfo:
          type: string
        linkfacebook:
          type: string
        linktwitter:
          type: string
        linkinstagram:
          type: string
      description: Object Json Type Users
    Product_ProductDetails:
      type: object
      properties:
        idproduct:
          type: integer
          format: int32
        iduser:
          $ref: '#/components/schemas/Users_ProductDetails'
        title:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int32
        idtagone:
          $ref: '#/components/schemas/Tags_ProductDetails'
        idtagtwo:
          $ref: '#/components/schemas/Tags_ProductDetails'
        idtagthree:
          $ref: '#/components/schemas/Tags_ProductDetails'
        idtagfour:
          $ref: '#/components/schemas/Tags_ProductDetails'
        idtagfive:
          $ref: '#/components/schemas/Tags_ProductDetails'
        status:
          type: string
        img0:
          type: boolean
        img1:
          type: boolean
        img2:
          type: boolean
        idtag:
          $ref: '#/components/schemas/Tags_ProductDetails'
      description: Object Type Product
    Tags_ProductDetails:
      type: object
      properties:
        idtags:
          type: integer
          format: int32
        description:
          type: string
        idtag:
          type: integer
          format: int32
    Users_ProductDetails:
      type: object
      properties:
        idusers:
          type: integer
          format: int32
        email:
          type: string
        username:
          type: string
        name:
          type: string
        companyprofile:
          type: boolean
        userprofile:
          type: boolean
        userportimg:
          type: string
    ListProducts_Basic:
      type: object
      properties:
        idproductlist:
          type: integer
          format: int32
        iduser:
          $ref: '#/components/schemas/Users_Basic'
        idproduct:
          $ref: '#/components/schemas/Product_Basic'
      description: Object Type ListProducts
    Product_Basic:
      type: object
      properties:
        idproduct:
          type: integer
          format: int32
        iduser:
          $ref: '#/components/schemas/Users_Basic'
        title:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int32
        idtagone:
          $ref: '#/components/schemas/Tags_Basic'
        idtagtwo:
          $ref: '#/components/schemas/Tags_Basic'
        idtagthree:
          $ref: '#/components/schemas/Tags_Basic'
        idtagfour:
          $ref: '#/components/schemas/Tags_Basic'
        idtagfive:
          $ref: '#/components/schemas/Tags_Basic'
        status:
          type: string
        img0:
          type: boolean
        img1:
          type: boolean
        img2:
          type: boolean
        idtag:
          $ref: '#/components/schemas/Tags_Basic'
    Tags_Basic:
      type: object
      properties:
        idtags:
          type: integer
          format: int32
        description:
          type: string
        idtag:
          type: integer
          format: int32
    Users_Basic:
      type: object
      properties:
        idusers:
          type: integer
          format: int32
        email:
          type: string
        username:
          type: string
        name:
          type: string
        companyprofile:
          type: boolean
        userprofile:
          type: boolean
        userportimg:
          type: string
    Users_Detailed:
      type: object
      properties:
        idusers:
          type: integer
          format: int32
        email:
          type: string
        username:
          type: string
        pass:
          type: string
        name:
          type: string
        companyprofile:
          type: boolean
        userprofile:
          type: boolean
        city:
          type: string
        userportimg:
          type: string
        userinfo:
          type: string
        linkfacebook:
          type: string
        linktwitter:
          type: string
        linkinstagram:
          type: string
      description: Object Json Type Users
    UsersRelations:
      type: object
      properties:
        iduserrelation:
          type: integer
          format: int32
        userone:
          $ref: '#/components/schemas/Users'
        usertwo:
          $ref: '#/components/schemas/Users'
      description: Object Json Type UsersRelations
